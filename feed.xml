<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quals Reading Notes</title>
    <description>Notes on readings for my qualifying exams.
</description>
    <link>http://jhamrick.github.io/quals/</link>
    <atom:link href="http://jhamrick.github.io/quals/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 31 Dec 2015 16:02:10 -0800</pubDate>
    <lastBuildDate>Thu, 31 Dec 2015 16:02:10 -0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Eye fixations and cognitive processes</title>
        <description>&lt;p&gt;&lt;span id=&quot;Just1976&quot;&gt;Just, M. A., &amp;amp; Carpenter, P. A. (1976). Eye fixations and cognitive processes. &lt;i&gt;Cognitive Psychology&lt;/i&gt;, &lt;i&gt;8&lt;/i&gt;, 441–480. doi:10.1016/0010-0285(76)90015-3&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Just &amp;amp; Carpenter explore three different tasks that rely on high-level cognitive processing, and recorded the eye movements of participants while performing these tasks. Their main hypothesis is that participants fixate on a region that is involved in whatever computation is currently taking place in the mind. I’m only going to go through the first of their experiments, however, as it is the most related to mental imagery and I feel the other two experiments are somewhat less revealing. Regarding the first mental rotation experiment, they ask three questions:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;How does the subject know which parts of the figure are to be rotated into each other?&lt;/li&gt;
    &lt;li&gt;How does the subject know how far to rotate one of the objects?&lt;/li&gt;
    &lt;li&gt;Once the required rotation has been performed, how does the subject know whether the two figures represent the same object or not?&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;methods&quot;&gt;Methods&lt;/h1&gt;

&lt;p&gt;Participants performed essentially the same task as that from &lt;a href=&quot;/quals/mental%20imagery/2015/12/31/Shepard1971.html&quot;&gt;Shepard &amp;amp; Metzler&lt;/a&gt;, though with far less data (120 trials vs 1600) and also fewer subjects (3 vs 8). Just &amp;amp; Carpenter find similar results, though not identical, results (i.e. monotonically increasing response times).&lt;/p&gt;

&lt;h1 id=&quot;algorithm&quot;&gt;Algorithm&lt;/h1&gt;

&lt;p&gt;Just &amp;amp; Carpenter propose the following model of cognitive processing:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First, participants engage in a “search” procedure, in which they look back and forth between the two images to find a corresponding segment of the objects.&lt;/li&gt;
  &lt;li&gt;Second, participants engage in the “transform and compare” procedure, in which they mentally rotate the images toward each other in increments of $50^\circ$ until the images are within $25^\circ$ of each other.&lt;/li&gt;
  &lt;li&gt;Third, participants engage in the “confirmation” procedure, in which they check that the other segments in the images also align. There are two proposed ways that they do this: either by executing a transformation on an additional segment of the stimulus, or by checking that the relations between the segments and the central part of the image are the same.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;

&lt;p&gt;I think it makes sense that people would only actually focus on a single portion of the image at a time, rather than holistically transforming the entire image. I feel though that Just &amp;amp; Carpenter haven’t answered their first question, which is how exactly the “search” procedure works. They do bring up an interesting point regarding this, which is that one possible reason for the increase in response time is that participants pick one segment in one image, and then try to find that segment in the other image, first looking at the same location in the second image—so by design, it will take them longer to find the corresponding segment if it is further away (as it would be due to rotation).&lt;/p&gt;

&lt;p&gt;I wonder how this procedure works with other types of objects, that don’t necessarily have such discrete “segments” as the stimuli used in this experiment. I suppose that this question might not actually be that relevant for realistic stimuli, though. If we use something like mental rotation to e.g. identify similar objects in the world, then we probably first rely on high-information, high-level features (color, texture, overall shape). Only if those features are absent (as is the case with the Shepard &amp;amp; Metzler stimuli) would one need to do something more detailed like a mental rotation.&lt;/p&gt;

&lt;p&gt;One takeaway from all of this, I feel, is that mental rotation isn’t really all that useful/important in and of itself—I would hypothesize that we are not able to do rotations for the sake of doing rotations, but that we need that sort of capability in order to reason about how objects interact with each other or how they should be manipulated (e.g. how should I rotate this object so that it fits in the drawer?). So under a rational analysis the question isn’t, “how does mental rotation work?”, but rather, “what problem is mental rotation solving?”. It would be nice to be able to come up with a realistic task (or set of tasks), for example, in which mental rotation is clearly the right solution, and then see how people do it, and then compare models that do or do not use mental rotation to solve the task. Maybe some sort of bin-packing problem? I am sure someone has studied that sort of thing in cognitive science; I should remember to look up some of that research.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Dec 2015 02:25:12 -0800</pubDate>
        <link>http://jhamrick.github.io/quals/mental%20imagery/2015/12/31/Just1976.html</link>
        <guid isPermaLink="true">http://jhamrick.github.io/quals/mental%20imagery/2015/12/31/Just1976.html</guid>
        
        
        <category>Mental imagery</category>
        
      </item>
    
      <item>
        <title>Mental rotation of three-dimensional objects</title>
        <description>&lt;p&gt;&lt;span id=&quot;Shepard1971&quot;&gt;Shepard, R. N., &amp;amp; Metzler, J. (1971). Mental Rotation of Three-Dimensional Objects. &lt;i&gt;Science&lt;/i&gt;, &lt;i&gt;171&lt;/i&gt;(3972), 701–703. doi:10.1126/science.171.3972.701&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Shepard and Metzler showed participants 2D line drawings of 3D objects which differed by either a rotation (the “same” pairs) or a rotation and a reflection (the “different” pairs). They found that as the angle of rotation increased for the “same” pairs, participants’ response times increased linearly. The conclusion (based both on this response time data, as well as experience reports) was that participants were performing a “mental rotation” of the images in order to compare them.&lt;/p&gt;

&lt;h1 id=&quot;methods&quot;&gt;Methods&lt;/h1&gt;

&lt;p&gt;Shepard &amp;amp; Metzler had 8 participants who each judged 1600 (!) pairs of line drawings. 800 of the pairs were “picture plane” rotations, while the other 800 were “depth” rotations. Each of these sets of stimuli were further broken down into 400 “same” and 400 “different” pairs. These 400 pairs were composed of 10 unique stimuli repeated twice at each one of ten angles from $0^\circ$ to $180^\circ$ in $20^\circ$ increments (side note: there seems to be another factor of 2 missing here; I’m not sure where that comes from?). Participants had as much time to respond as they wanted, and they could look at the images as long as they wanted, though they were instructed to respond as quickly as possible while still being accurate.&lt;/p&gt;

&lt;h1 id=&quot;algorithm&quot;&gt;Algorithm&lt;/h1&gt;

&lt;p&gt;n/a&lt;/p&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;

&lt;p&gt;I still think this is such a cool result, though I am still unsatisfied by the rotation explanation. One quote from the paper is potentially illuminating, though:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the postexperimental interview, the subjects typically reported that they attempted to rotate one end of one object into congruence with the corresponding end of the other object; they discovered that the two objects were &lt;em&gt;different&lt;/em&gt; when, after this “rotation,” the two free ends still remained noncongruent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This point is going to elaborated on further in the next paper I am going to read, by Just &amp;amp; Carpenter.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Dec 2015 00:46:36 -0800</pubDate>
        <link>http://jhamrick.github.io/quals/mental%20imagery/2015/12/31/Shepard1971.html</link>
        <guid isPermaLink="true">http://jhamrick.github.io/quals/mental%20imagery/2015/12/31/Shepard1971.html</guid>
        
        
        <category>Mental imagery</category>
        
      </item>
    
      <item>
        <title>Robust Adaptive Markov Decision Processes</title>
        <description>&lt;p&gt;&lt;span id=&quot;Bertuccelli2012&quot;&gt;Bertuccelli, L. F., Bethke, B., &amp;amp; How, J. P. (2012). Robust adaptive Markov decision processes: Planning with model uncertainty. &lt;i&gt;IEEE Control Systems Magazine&lt;/i&gt;. doi:10.1109/MCS.2012.2205478&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Bertuccelli et al. describe the &lt;em&gt;Robust Adaptive Markov Decision Process&lt;/em&gt; (RAMDP), which is a type of MDP that takes into account uncertainty in the transition dynamics. This is somewhat similar to the BAMDP (see e.g. &lt;a href=&quot;/quals/planning%20and%20decision%20making/2015/12/19/Guez2013.html&quot;&gt;Guez et al.&lt;/a&gt;), which maintains a posterior distribution over the transition dynamics and/or reward function, and acts in a Bayes-optimal manner to maximize reward according to the posterior (i.e. by marginalizing over the uncertain dynamics). In contrast, the RAMDP maximizes a lower bound on the reward:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;J_R^*(i_0)=\min_{\mathcal{A}^\mu}\max_\mu \mathbb{E}[J_\mu(i_0)]&lt;/script&gt;

&lt;p&gt;where $\mathcal{A}$ is the transition model, $\mu$ is the policy, $J_R$ is the robust objective function, $J_\mu$ is the objective function under policy $\mu$, and $i$ is the state.&lt;/p&gt;

&lt;p&gt;To compute the minimum over transition models, they first define a feasible uncertainty set which, in this case, they choose to be the Dirichlet distribution. They then use a “scenario-based method”, which seems to just be sampling, over which to compute the minimum. Rather than taking a Monte-Carlo sampling approach, they compute &lt;em&gt;sigma points&lt;/em&gt;, which are optimal sampling locations based on the mean and variance of the Dirichlet distribution:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
\mathcal{Y}_0&amp;=\bar{p}\\
\mathcal{Y}_i&amp;=\bar{p}+\beta_i(\Sigma^{1/2})_i\ \ \mathrm{for\ all}\ i\leq N\\
\mathcal{Y}_i&amp;=\bar{p}-\beta_i(\Sigma^{1/2})_i\ \ \mathrm{for\ all}\ N+1\leq i &lt;2N
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;where $\beta$ is “a tuning parameter that reflects the level of conservatism desired” (i.e. the range of the credible region), and $\bar{p}$ and $\Sigma$ are the mean and covariance of the Dirichlet distribution.&lt;/p&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;

&lt;p&gt;It’s not entirely clear to me in terms of theoretical guarantees whether BAMDP or RAMDP is better. My intuition is that BAMDP is probably more flexible, as it could potentially be used with complex structured priors. I suppose you could technically do the same for RAMDPs as well, though you would need to reformulate how to perform efficient sampling (since the approach taken by Bertuccelli et al. makes a strong assumption about the Dirichlet distribution). It seems that BAMDPs may be a little bit more agnostic of the assumptions put into the prior, particularly when used with something like MCTS. That said, I suspect that RAMDP probably provides better worst-case guarantees given that it’s explicitly optimizing for the worst case. But, these are just my intuitions; I’m not sure how true that is in practice or how much the worst case matters in non-adversarial settings.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Dec 2015 23:54:51 -0800</pubDate>
        <link>http://jhamrick.github.io/quals/planning%20under%20uncertain%20dynamics/2015/12/30/Bertuccelli2012.html</link>
        <guid isPermaLink="true">http://jhamrick.github.io/quals/planning%20under%20uncertain%20dynamics/2015/12/30/Bertuccelli2012.html</guid>
        
        
        <category>Planning under uncertain dynamics</category>
        
      </item>
    
      <item>
        <title>Model-free probabilistic movement primitives for physical interaction</title>
        <description>&lt;p&gt;&lt;span id=&quot;Paraschos2015&quot;&gt;Paraschos, A., Rueckert, E., Peters, J., &amp;amp; Neumann, G. (2015). Model-Free Probabilistic Movement Primitives for Physical Interaction. &lt;i&gt;Proceedings Of the IEEE/RSJ Conference on Intelligent Robots and Systems&lt;/i&gt;. Retrieved from http://www.ausy.tu-darmstadt.de/uploads/Team/PubAlexParaschos/Paraschos_IROS_2015.pdf&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;In this work (and in previous work), Paraschos et al. present a framework for learning “probabilistic motion primitives” (ProMPs), which is essentially a way of learning a distribution over trajectories. In this paper, they explicitly encode the trajectory distributions to not just be over states, but also over controls (forces/torques) and sensory information. That is, they define a trajectory as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
\mathbf{y}_t&amp;=[q_t,\dot{q}_t,u_t]^\top\\
\mathbf{\tau}&amp;=[\mathbf{y}_1, \ldots{}, \mathbf{y}_T]
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;They then define the trajectory in terms of basis functions:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(\mathbf{\tau}\vert w)=\prod_t \mathcal{N}(\mathbf{y}_t\vert \mathbf{\Phi}_t \mathbf{w},\mathbf{\Sigma_y})&lt;/script&gt;

&lt;p&gt;and learn the distribution over trajectories in terms of a hierarchical Bayesian model, marginalizing out the weights:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(\mathbf{\tau};\mathbf{\theta})=\int p(\mathbf{\tau}\vert \mathbf{w})p(\mathbf{w};\mathbf{\theta})\ \mathrm{d}\mathbf{w}&lt;/script&gt;

&lt;p&gt;Paraschos et al. assume that pretty much everything is Gaussian, which allows them to derive nice analytical solutions for everything, including the controller $p(\mathbf{u}_t\vert \tilde{\mathbf{y}}_t)$ (where $\tilde{\mathbf{y}}_t$ is the observable state of the system).&lt;/p&gt;

&lt;p&gt;As described in their previous paper (NIPS ‘13), this type of system provides a lot of nice properties: it is easy to condition on a particular aspect of a trajectory; to combine multiple motion primitives by multiplying the distributions; to blend multiple primitives according to an activation function; etc. By also including the control information, they are not only able to produce the desired trajectory in these scenarios, but the controls to achieve that trajectory as well. This is a somewhat similar approach to &lt;a href=&quot;/quals/physical%20reasoning%20without%20dynamics%20models/2015/12/30/Lee2015.html&quot;&gt;Lee et al.&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;

&lt;p&gt;This is a cool paper that really demonstrates the power of maintaining a full generative model. It brings up an interesting distinction between model-based control and generative models—in this paper, Paraschos et al. explicitly are not using a model-based approach for controlling the robot (i.e., there is no dynamics model of the robot or the object), but they do estimate a full joint distribution over pose, velocity, force, and sensor data. With enough data, such a joint distribution could be essentially analogous to learning a model for control; in that case, the model is just not explicitly represented. You could even simulate forward by conditioning on the previous state.&lt;/p&gt;

&lt;p&gt;As with all of these papers that I’ve been reading, though, it seems like these approaches that rely solely on demonstrations won’t be able to generalize to novel objects or actions. I suppose that people do have tons of experience; after only a few weeks after birth babies will have already been exposed to thousands of trajectories (of course, those are not expert demonstrations). I wonder how well this sort of approach would work with some type of self-supervised learning: i.e., you learn the joint distribution over states and actions, but the examples you have are self-generated and are not as reliable as expert demonstrations. I also wonder if you could combine this with something like &lt;a href=&quot;/quals/physical%20reasoning%20with%20dynamics%20models/2015/12/28/Xie2015.html&quot;&gt;Xie et al.&lt;/a&gt;, where instead of learning model-free controls, you do learn an explicit model, but you learn the model online along with the rest of the distribution.&lt;/p&gt;

</description>
        <pubDate>Wed, 30 Dec 2015 09:34:01 -0800</pubDate>
        <link>http://jhamrick.github.io/quals/physical%20reasoning%20without%20dynamics%20models/2015/12/30/Paraschos2015.html</link>
        <guid isPermaLink="true">http://jhamrick.github.io/quals/physical%20reasoning%20without%20dynamics%20models/2015/12/30/Paraschos2015.html</guid>
        
        
        <category>Physical reasoning without dynamics models</category>
        
      </item>
    
      <item>
        <title>Stabilizing novel objects by learning to predict tactile slip</title>
        <description>&lt;p&gt;&lt;span id=&quot;Veiga2015&quot;&gt;Veiga, F., van Hoof, H., Peters, J., &amp;amp; Hermans, T. (2015). Stabilizing Novel Objects by Learning to Predict Tactile Slip. &lt;i&gt;Proceedings Of the IEEE/RSJ Conference on Intelligent Robots and Systems&lt;/i&gt;. Retrieved from http://www.ausy.tu-darmstadt.de/uploads/Site/EditPublication/IROS2015veiga.pdf&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Veiga et al. compare a variety of supervised machine learning methods for learning to detect and predict tactile slip. They compare both SVMs and random forest classifiers and use features that come from a tactile sensor based on the human finger. More specifically, they have three different ways of constructing features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Single element features – based only on the current timestep, $\phi(\mathbf{x}_{1:t})=\mathbf{x}_t$&lt;/li&gt;
  &lt;li&gt;Delta features – based on the current timestep, as well as the change from the last timestep, $\phi(\mathbf{x}_{1:t})=[\mathbf{x}_t,\Delta\mathbf{x}_t]$&lt;/li&gt;
  &lt;li&gt;Time window features – based on a window of previous time steps, $\phi(\mathbf{x}_{1:t})=\mathbf{x}_{t-\tau:t}$, where $\tau$ is the size of the time window&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The random forest classifiers tend to do the best, particularly with the delta features.&lt;/p&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;

&lt;p&gt;In this paper, Veiga et al. use purely discriminative methods to detect and predict slip based on features extracted from a tactile sensor. This means that their method works independently of object-specific features and thus does not take into account anything about the actual dynamics of the object. In this case, this approach actually makes a lot of sense to me—it feels like it would be overkill to need to have a full dynamics model of how the object behaves just to determine if it is slipping. That said, I do wonder if having &lt;em&gt;some&lt;/em&gt; approximate knowledge of the object dynamics (e.g. curvature, overall mass, distribution of mass, etc.) would help, particularly in having the controller adjust once it has detected that the object is slipping.&lt;/p&gt;

&lt;p&gt;I also wonder to what extent these learned classifiers will generalize to greater changes in mass/shape/friction—e.g. will the same classifier work for a very heavy object as opposed to a very light object? Or a very smooth object vs. a rough object? And, will it generalize to other types of scenarios where slip might occur (e.g. holding an object with two hands, as opposed to up against a wall; and also, the location where the object is being held).&lt;/p&gt;

&lt;p&gt;This paper also made me think a bit about what constitutes simulation. In this paper, Veiga et al. are able to predict several timesteps into the future whether slip &lt;em&gt;will&lt;/em&gt; occur. Even though they don’t have a dynamics model of how slip changes over time, for example, does this type of prediction still count as “simulation”? I’m tempted to say no, not unless they can predict at each timestep &lt;em&gt;how much&lt;/em&gt; slip is going to occur—e.g. in the next timestep, there will be a small amount of slip, in the following timestep, it will increase by so much, etc. I don’t think this type of prediction would be particularly hard to do, though, if they could perhaps attach sensors to their objects in order to more precisely quantify what slip is (in this paper, they labeled parts of the video as “slip” or “not slip” just by human visual judgments).&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Dec 2015 07:48:29 -0800</pubDate>
        <link>http://jhamrick.github.io/quals/physical%20reasoning%20without%20dynamics%20models/2015/12/30/Veiga2015.html</link>
        <guid isPermaLink="true">http://jhamrick.github.io/quals/physical%20reasoning%20without%20dynamics%20models/2015/12/30/Veiga2015.html</guid>
        
        
        <category>Physical reasoning without dynamics models</category>
        
      </item>
    
      <item>
        <title>Learning force-based manipulations of deformable objects from multiple demonstrations</title>
        <description>&lt;p&gt;&lt;span id=&quot;Lee2015&quot;&gt;Lee, A. X., Lu, H., Gupta, A., Levine, S., &amp;amp; Abbeel, P. (2015). Learning Force-Based Manipulation of Deformable Objects from Multiple Demonstrations. &lt;i&gt;Proceedings Of the IEEE International Conference on Robotics and Automation&lt;/i&gt;. doi:10.1109/ICRA.2015.7138997&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;This paper builds on &lt;a href=&quot;/quals/physical%20reasoning%20without%20dynamics%20models/2015/12/29/Schulman2013a.html&quot;&gt;Schulman et al.&lt;/a&gt; by not only warping the pose of the robot’s trajectory, but also the force that is applied to the objects. This makes for a more robust and generalizable scheme for manipulating deformable objects (such as rope).&lt;/p&gt;

&lt;h1 id=&quot;methods&quot;&gt;Methods&lt;/h1&gt;

&lt;p&gt;n/a&lt;/p&gt;

&lt;h1 id=&quot;algorithm&quot;&gt;Algorithm&lt;/h1&gt;

&lt;p&gt;The algorithm has several steps:&lt;/p&gt;

&lt;h2 id=&quot;step-1&quot;&gt;Step 1&lt;/h2&gt;

&lt;p&gt;Perform scene registration, where the points from the test scene are mapped to the points from the demonstrated scene in order to come up with a function $f$ that transforms between the two.&lt;/p&gt;

&lt;h2 id=&quot;step-2&quot;&gt;Step 2&lt;/h2&gt;

&lt;p&gt;The trajectories from demonstrated scenes are mapped to the new scene using $f$: the poses are given by $\tilde{\mathbf{Q}}^d=f(\hat{\mathbf{Q}}^d)$ and the forces are given by $\tilde{\mathbf{U}}^d=\frac{df^d}{d\mathbf{p}}(\hat{\mathbf{Q}}^d)\hat{\mathbf{U}}^d$.&lt;/p&gt;

&lt;h2 id=&quot;step-3&quot;&gt;Step 3&lt;/h2&gt;

&lt;p&gt;The trajectories are time-aligned using “dynamic time warping” such that all demonstrated trajectories follow the same time course. This yields $\mathbf{Q}^d$ and $\mathbf{U}^d$.&lt;/p&gt;

&lt;h2 id=&quot;step-4&quot;&gt;Step 4&lt;/h2&gt;

&lt;p&gt;To extract the final trajectory based on the time-aligned demonstrated trajectories, Lee et al. use a Gaussian model of the force:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(\mathbf{u}^d_t\vert \mathbf{q}_t^d,\mathbf{\dot{q}}_t^d)=\mathcal{N}(\mathbf{K}_{pt}(\mathbf{\bar{q}}_t-\mathbf{q}_t^d)+\mathbf{K}_{vt}(\dot{\bar{\mathbf{q}}}_t-\dot{\mathbf{q}}_t^d)+\bar{\mathbf{u}}_t; \mathbf{C}_t)&lt;/script&gt;

&lt;p&gt;Here, $\bar{\mathbf{q}}_t$, $\dot{\bar{\mathbf{q}}}_t$, and $\bar{\mathbf{u}}_t$ are the positions, velocities, and forces of the desired trajectory and are computed by fitting a joint Gaussian distribution to $[\mathbf{q}_t^d,\dot{\mathbf{q}}_t^d,\mathbf{u}_t^d]$ at each time step and then taking the mean of that distribution. The variables $\mathbf{K}_{pt}$ and $\mathbf{K}_{vt}$ are the position and velocity gains and are computed from the covariances of the fitted joint Gaussians: $\mathbf{K}_{pt}=-\Sigma_{\mathbf{uq},t}\Sigma^{-1}_{\mathbf{qq},t}$ and $\mathbf{K}_{vt}=-\Sigma_{\mathbf{u\dot{q}},t}\Sigma^{-1}_{\mathbf{\dot{q}q},t}$ (see Section 8.1.3 of the Matrix Cookbook for a better intuition of where this comes from).&lt;/p&gt;

&lt;p&gt;Rather than directly fitting the covariances $\Sigma_t$, they use a inverse-Wishart prior on the covariance in order to encourage the gains to be non-negative. They additionally include samples from nearby time points which encourages the estimate to vary smoothly over time.&lt;/p&gt;

&lt;h2 id=&quot;step-5&quot;&gt;Step 5&lt;/h2&gt;

&lt;p&gt;Lee et al. now optimize the robot joint angles $\Theta=[\theta_1,\ldots{},\theta_T]^\top$ to match the desired trajectory (as computed in the previous step). Then, they convert the gains into joint-space gains $\mathbf{K}_{pt}^\theta$ and $\mathbf{K}_{vt}^\theta$ and compute the torque as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbf{f}_t=\mathbf{K}_{pt}^\theta(\theta_t-\theta_\mathrm{obs})+\mathbf{K}_{vt}^\theta(\dot{\theta}_t-\dot{\theta}_\mathrm{obs})+\mathbf{J}(\theta)^\top\bar{\mathbf{u}}_t&lt;/script&gt;

&lt;p&gt;where $\mathbf{J}(\theta)$ is the Jacobian and where $\theta_\mathrm{obs}$ and $\dot{\theta}_\mathrm{obs}$ are the observed joint angles and velocities.&lt;/p&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;

&lt;p&gt;This approach is a significant improvement over previous work, which was unable to generalize to situations in which the applied force was more important than the exact position (e.g. folding a larger towel than the one in the demonstrations requires applying the same force, but moving the arms out further in order to apply that force). The core idea is still the same, however: without having any task-specific or physical knowledge, map from demonstrated trajectories (including forces) to new situations.&lt;/p&gt;

&lt;p&gt;I think it’s really interesting that they are able to take force into account and trade off between force and position without actually having knowledge of the task; I’m surprised it works as well as it does! The intuition behind why it works is that when there is variance in the demonstrations, that implies that absolute position is less important, and that something else is more important—for example, force. Thus, where there is more variance in position, the force should be considered more strongly, and when there is low variance, position should be considered more strongly. I do wonder though whether this property always holds true. For example, if you were trying to unscrew a cap from a jar, and different demonstrations had caps that were stuck more or less tightly, I &lt;em&gt;think&lt;/em&gt; that the position of the gripper would end up still being about the same—it would be the force that differs. In that case, this wouldn’t work (I think) because it would move the gripper in the appropriate way, but not apply the right force; and in fact, having demonstrations of the force wouldn’t necessarily be sufficient either—to accomplish this task, you would have to have some notion of the position of the jar and the cap and how much the cap is moving, etc.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Dec 2015 02:52:02 -0800</pubDate>
        <link>http://jhamrick.github.io/quals/physical%20reasoning%20without%20dynamics%20models/2015/12/30/Lee2015.html</link>
        <guid isPermaLink="true">http://jhamrick.github.io/quals/physical%20reasoning%20without%20dynamics%20models/2015/12/30/Lee2015.html</guid>
        
        
        <category>Physical reasoning without dynamics models</category>
        
      </item>
    
      <item>
        <title>Learning from demonstrations through the use of non-rigid registration</title>
        <description>&lt;p&gt;&lt;span id=&quot;Schulman2013a&quot;&gt;Schulman, J., Ho, J., Lee, C., &amp;amp; Abbeel, P. (2013). Learning from Demonstrations Through the Use of Non-Rigid Registration. &lt;i&gt;Proceedings Of the 16th International Symposium on Robotics Research&lt;/i&gt;. Retrieved from http://www.cs.berkeley.edu/ pabbeel/papers/SchulmanHoLeeAbbeel_ISRR2013.pdf&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Schulman et al. describe a way to learn from demonstration for performing tasks with deformable objects (e.g., rope tying). The core idea behind their method is essentially to compute a geometric transformation $\mathbf{f}$ which maps from one state to another state, and which can be applied to the demonstrated trajectory to produce a new trajectory. This approach, combined with a nearest-neighbors selection policy, works well for transforming given trajectories to new trajectories as long as the nearest neighbor is close enough.&lt;/p&gt;

&lt;p&gt;Their approach rests on the following property (the &lt;em&gt;cost function invariance&lt;/em&gt;):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L(\mathrm{State},\mathrm{Traj})=L(\mathbf{f}(\mathrm{State}),\mathbf{f}(\mathrm{Traj}))&lt;/script&gt;

&lt;p&gt;where $L$ is the loss function. Using this property, the following approximation follows:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
L(\mathrm{State}_\mathrm{test},\mathbf{f}(\mathrm{Traj}_\mathrm{train}))&amp;\approx L(\mathbf{f}(\mathrm{State}_\mathrm{train}),\mathbf{f}(\mathrm{Traj}_\mathrm{train}))\\
&amp;= L(\mathrm{State}_\mathrm{train},\mathrm{Traj}_\mathrm{train})
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;An alternate intuition for why this works is that of &lt;em&gt;dynamics invariance&lt;/em&gt;, in which the “dynamics of the system are approximately invariant—more properly, &lt;em&gt;covariant&lt;/em&gt;—under sufficiently smooth coordinate transformations”. This is true if and only if:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbf{f}(\Pi_\mathrm{Traj}(\mathrm{State}^t))=\Pi_{\mathbf{f}(\mathrm{Traj})}(f(\mathrm{State}^t))&lt;/script&gt;

&lt;p&gt;where $\Pi_\mathrm{Traj}(\mathrm{State})$ applies trajectory $\mathrm{Traj}$ to state $\mathrm{State}$.&lt;/p&gt;

&lt;p&gt;Of course, there are cases where this will not hold. The example they give in the paper is a rigid transformation where the “absolution orientation of the robot’s end-effector matters”. However, based on their results, it seems that for a wide range of states and trajectories it does hold well enough to generalize to new states.&lt;/p&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;

&lt;p&gt;This is a clever use of nearest neighbors to generalize from examples without needing to have any knowledge of the domain (besides being able to perceive the position/topology of the relevant object, e.g. the rope). However, I wonder how far this will really generalize, even with many examples. For example, if you had to tie a rope around another object, I don’t think this would work as well—and this intuition seems to be correct, based on their experimental results (1/10 successes for the clove hitch, which involves tying a rope around a pole). I would expect it to be even harder if the task involved tying a rope around a nonrigid object. There is simply so much noise in the system that without some model of how the objects behave, you are going to quickly run into scenarios that you don’t have examples for.&lt;/p&gt;

&lt;p&gt;I also think you would probably quickly run into scenarios where the transformation between states isn’t smooth. For example, if the task were to place a block on a stack of blocks and have the tower remain stable, the stability of the tower doesn’t vary smoothly as a function of the positions of the blocks. So even if you had encountered a very similar tower in the past, it’s entirely possible that even a slight difference between that tower and the current one could result in nonlinearities—e.g. in the first tower you need to place the block in position A to keep the tower stable, but position A in the second tower will always be unstable.&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Dec 2015 11:18:08 -0800</pubDate>
        <link>http://jhamrick.github.io/quals/physical%20reasoning%20without%20dynamics%20models/2015/12/29/Schulman2013a.html</link>
        <guid isPermaLink="true">http://jhamrick.github.io/quals/physical%20reasoning%20without%20dynamics%20models/2015/12/29/Schulman2013a.html</guid>
        
        
        <category>Physical reasoning without dynamics models</category>
        
      </item>
    
      <item>
        <title>Model-based Bayesian reinforcement learning in large structured domains</title>
        <description>&lt;p&gt;&lt;span id=&quot;Ross2008&quot;&gt;Ross, S., &amp;amp; Pineau, J. (2008). Model-based Bayesian Reinforcement Learning in Large Structured Domains. &lt;i&gt;Proceedings Of the 24th Conference in Uncertainty in Artificial Intelligence&lt;/i&gt;, 476–483. Retrieved from http://arxiv.org/abs/1206.3281&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Ross &amp;amp; Pineau propose a method for performing Bayesian reinforcement learning when both the structure and parameters of the transition function are unknown. That is, they need to infer $P(G,\theta_G\vert D)$ where $G$ is the graph structure, $\theta_G$ are the parameters of the graph, and $D$ is the observed data. Then, given this posterior, they need to plan optimally with respect to it. Ross &amp;amp; Pineau show how this can be done by casting the problem as a POMDP (where the unobserved states consist of the original state, the graph structure, and the graph parameters) and then suggest an algorithm for planning in continuous, high-dimensional POMDPs such as this that uses particle filtering with resampling. They show that their method rapidly recovers the correct structure in simple cases and recovers incorrect but approximate structure in more complex cases, and that it is significantly faster and more accurate than a MDP which does full joint inference over transitions (i.e. does not take into account structure).&lt;/p&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;

&lt;p&gt;I am not going to go into the nitty-gritty details of the math in this paper—I think the important takeaway is that by doing Bayesian RL, we can maintain not only a distribution over what we think the transition function is, but we can incorporate structured prior knowledge into the inference procedure. So rather than assuming what is essentially a fully connected transition graph and estimating the parameters of each edge, we can keep open the possibility that the transition function has some form of higher-level structure. I think this is particularly important because it could potentially allow you to do inference about transitions or rewards from states that are different but are actually similar according to some high level structure. Actually, I think this is probably especially important for reward structures, even more so than transition structures—for example if the reward structure is based on something like the graph structures discussed by &lt;a href=&quot;/quals/probabilistic%20models%20of%20cognition/2015/11/08/Kemp2008.html&quot;&gt;Kemp &amp;amp; Tenenbaum&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Dec 2015 04:16:31 -0800</pubDate>
        <link>http://jhamrick.github.io/quals/planning%20and%20decision%20making/2015/12/29/Ross2008.html</link>
        <guid isPermaLink="true">http://jhamrick.github.io/quals/planning%20and%20decision%20making/2015/12/29/Ross2008.html</guid>
        
        
        <category>Planning and decision making</category>
        
      </item>
    
      <item>
        <title>The scope and limits of simulation in automated reasoning</title>
        <description>&lt;p&gt;&lt;span id=&quot;Davis&quot;&gt;Davis, E., &amp;amp; Marcus, G. F. The Scope and Limits of Simulation in Automated Reasoning. &lt;i&gt;Artificial Intelligence&lt;/i&gt;. Retrieved from http://www.cs.nyu.edu/faculty/davise/papers/SimulationSubmitAIJ.pdf&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Davis &amp;amp; Marcus summarize some of the challenges that they seen in using simulation for automated reasoning (and in particular physical reasoning). The twelve challenges that they discuss are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Choosing an appropriate model&lt;/strong&gt;. For example, what kind of cutting instrument should be used for firewood? (Not scissors.)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Discretizing time&lt;/strong&gt;. There are various issues with this, for example having objects pass through each other, running into instability due to inappropriate discretizations, or violating constrainst such as conservation of matter.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Discontinuous dynamics&lt;/strong&gt;. Small perturbations can lead to large changes in dynamics (e.g. rolling a die, chaotic systems).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Choosing an idealization&lt;/strong&gt;. What representation should be used in the simulation? e.g., should a pendulum be represented by a point mass moving on a circle, by a rigid shape constrained to be a certain distance from the origin, by a rigid shape on a (deformable) string, etc.?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Drawing “easy” inferences&lt;/strong&gt;. Some types of inferences are “easy” but simulation is not well-suited to them. For example:
    &lt;ul&gt;
      &lt;li&gt;Invariance under irrelevant changes (if a jar fits on a shelf, and you fill it, it will still fit on the shelf)&lt;/li&gt;
      &lt;li&gt;Invariance under changes of scale (e.g. kinematics is the same regardless of the size of the objects)&lt;/li&gt;
      &lt;li&gt;Approximation (e.g. containers of similar sizes will hold similar amounts of liquid)&lt;/li&gt;
      &lt;li&gt;Ordering on a relevant dimension (e.g. if a toy fits in a box, then it will fit in a larger box)&lt;/li&gt;
      &lt;li&gt;Decomposition (e.g. if there are two independent subsystems, they can be reasoned about independently)&lt;/li&gt;
      &lt;li&gt;Rules of thumb (e.g. you spill coffee in your office –&amp;gt; it won’t end up in another office)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Incorporating extra-physical information&lt;/strong&gt;. Sometimes information that is non-physical can still be useful in predicting physical systems (e.g. general accuracy of a baseball pitcher)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Incomplete information&lt;/strong&gt;. You don’t always have fully specified information about the system, such as occluded geometry, unobservable properties (like mass, friction), unknown dynamics, etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Irrelevant information&lt;/strong&gt;. How should the automated system determine what information is irrelevant and should be excluded? This is something that is typically done by hand (by the modeller) but in the general case needs to be handled by the system.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Range of scales&lt;/strong&gt;. How can simulation scale from very small scales (e.g. everyday objects) to very large scales (e.g. stars)?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tasks other than prediction&lt;/strong&gt;. There are other types of tasks that simulation does not deal well with:
    &lt;ul&gt;
      &lt;li&gt;Interpolation&lt;/li&gt;
      &lt;li&gt;Planning&lt;/li&gt;
      &lt;li&gt;Inferring object shape&lt;/li&gt;
      &lt;li&gt;Inferring physical properties&lt;/li&gt;
      &lt;li&gt;Design of systems&lt;/li&gt;
      &lt;li&gt;Comparative analysis (determining how a modification to a system would affect the solution)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The frame problem&lt;/strong&gt;. Reasoning separately about things that are independent.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Checking simulations with common sense&lt;/strong&gt;. If simulation is the only reasoning mechanism, then there is nothing to check whether the simulation is correct.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;

&lt;p&gt;I certainly agree with Davis &amp;amp; Marcus that simulation isn’t the only form of reasoning, and I think there are very interesting questions regarding how we trade off between different forms of reasoning. Any system that uses simulation almost certainly needs to incorporate the following choices:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Determine what type of reasoning to use, based on features of the problem.&lt;/li&gt;
  &lt;li&gt;If simulation is appropriate, determine how to set up the simulation and how to evaluate/interpret the results of the simulation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I would argue that the majority of Davis &amp;amp; Marcus’ objections are just reformulations of the question of how to address these two choices. Points 1, 2, 4, 7, 8, 9, 11, and 12 are instances of “how to set up an appropriate simulation and interpret it?”. Points 5, 6, and 10 are instances of “should simulation be used, or something else?”. The only remaining point is Point 3, which doesn’t seem like a problem to me. Reasoning about the world is inherently uncertain, and any reasoning system needs to be able to take that type of uncertainty into account. Simulation needs to be precise in one sense (that things need to be fully specified), but it does not need to be &lt;em&gt;accurate&lt;/em&gt;, and the specification need not necessarily be precise, either.&lt;/p&gt;

&lt;p&gt;I do think that the questions of whether to use simulation or something else, and then &lt;em&gt;how&lt;/em&gt; to use simulation, are incredibly important and extremely difficult questions. Also, the fact that I’ve boiled 12 points down into 2 doesn’t mean that those two choices aren’t &lt;em&gt;incredibly&lt;/em&gt; difficult and don’t have multiple subquestions. But I don’t think that the fact that simulation is a difficult topic means that we shouldn’t use it or research its capabilities and the extent of its utility. It seems to me that simulation—and generative models more broadly—are really powerful because they’re so flexible and can apply in so many ways to so many types of scenarios. The question is how to take full advantage of that flexbility.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Dec 2015 08:54:26 -0800</pubDate>
        <link>http://jhamrick.github.io/quals/physical%20reasoning%20with%20dynamics%20models/2015/12/28/Davis.html</link>
        <guid isPermaLink="true">http://jhamrick.github.io/quals/physical%20reasoning%20with%20dynamics%20models/2015/12/28/Davis.html</guid>
        
        
        <category>Physical reasoning with dynamics models</category>
        
      </item>
    
      <item>
        <title>Model-based reinforcement learning with parametrized physical models and optimism-driven exploration</title>
        <description>&lt;p&gt;&lt;span id=&quot;Xie2015&quot;&gt;Xie, C., Patil, S., Moldovan, T., Levine, S., &amp;amp; Abbeel, P. (2015). Model-based Reinforcement Learning with Parametrized Physical Models and Optimism-Driven Exploration. &lt;i&gt;ArXiv Preprint ArXiv:1509.06824v1 [Cs.LG]&lt;/i&gt;. Retrieved from http://arxiv.org/abs/1509.06824&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;In this paper, Xie et al. use a linear approximation to physical dynamics using dynamics features in order to perform optimism-based exploration for model-based reinforcement learning. For certain dynamical systems, such as a pendulum or robot arm, this approach works remarkably well because the dynamics can be factored into a linear least-squares model where certain features are known (e.g. joint angles) and others must be learned (e.g. link weights or lengths) as part of the RL process. This can either be done by hand or with the help of libraries like &lt;a href=&quot;https://github.com/cdsousa/sympybotics&quot;&gt;SymPyBotics&lt;/a&gt; (which looks super cool!).&lt;/p&gt;

&lt;h1 id=&quot;methods&quot;&gt;Methods&lt;/h1&gt;

&lt;p&gt;n/a&lt;/p&gt;

&lt;h1 id=&quot;algorithm&quot;&gt;Algorithm&lt;/h1&gt;

&lt;p&gt;There are a few components to this algorithm, which I will describe separately.&lt;/p&gt;

&lt;h2 id=&quot;optimism-based-exploration&quot;&gt;Optimism-based exploration&lt;/h2&gt;

&lt;p&gt;The idea behind optimism-based exploration is related to the idea of having slack variables in an optimization. Essentially, you have some estimate of the dynamics, and you can act greedily with respect to those dynamics:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbf{\ddot{q}}_t=\hat{f}(\mathbf{q}_t,\mathbf{\dot{q}}_t,\tau_t)&lt;/script&gt;

&lt;p&gt;where $\hat{f}$ are the forward dynamics. To make it optimism-based:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbf{\ddot{q}}_t=\hat{f}(\mathbf{q}_t,\mathbf{\dot{q}}_t,\tau_t)+\mathbf{\xi}_t=\mathbf{\tilde{f}}(\mathbf{q}_t,\mathbf{\dot{q}}_t,\tau_t,\mathbf{\xi}_t)&lt;/script&gt;

&lt;p&gt;where $\mathbf{\xi}_t$ is a slack variable. This variable is constrained based on the amount of uncertainty in the estimate of the dynamics $\hat{f}$. Rather than explicitly estimating this uncertainty, Xie et al. simply include a penalty term of the form $\frac{1}{m}\lVert\mathbf{\xi}_t\rVert^2$ where $m$ is proportional to the number of samples.&lt;/p&gt;

&lt;h2 id=&quot;linear-least-squares-model&quot;&gt;Linear least squares model&lt;/h2&gt;

&lt;p&gt;The equations of motion can be factored into a linear equation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;H(\mathbf{q},\mathbf{\dot{q}}, \mathbf{\ddot{q}})\cdot{}\Delta=\mathbf{\tau}&lt;/script&gt;

&lt;p&gt;where $\Delta$ are the system parameters to be estimated and $H$ are the physical features (e.g. joint angles). Given observations of $[\mathbf{q},\mathbf{\dot{q}}, \mathbf{\ddot{q}}]$, $\Delta$ can be estimated using least-squares regression, thus giving the forward dynamics model ($\mathbf{\tilde{f}}(\mathbf{q}_t,\mathbf{\dot{q}}_t,\tau_t,\mathbf{\xi}_t)$) that can then be used in model-predictive control.&lt;/p&gt;

&lt;h2 id=&quot;model-predictive-control&quot;&gt;Model-predictive control&lt;/h2&gt;

&lt;p&gt;The MPC algorithm used by Xie et al. is the same as that used by &lt;a href=&quot;/quals/physical%20reasoning%20with%20dynamics%20models/2015/12/28/Kitaev2015.html&quot;&gt;Kitaev et al.&lt;/a&gt; (iterative linear quadratic regulator). Briefly:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The algorithm iteratively computes first order expansions of the dynamics and second order expansions of the cost around the current trajectory, and then analytically computes the sequence of optimal controls with respect to this approximation. This sequence of controls is then executed to obtain a new trajectory, and the process repeats until convergence or for a fixed number of iterations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;

&lt;p&gt;By using prior knowledge of the &lt;em&gt;structure&lt;/em&gt; of dynamics, it is possible to quickly learn the correct model parameters needed to use model-predictive control. This is really powerful, because model-predictive control can be much more efficient and accurate than a model-free method, especially for systems with complex dynamics (e.g. a 7 DOF robot arm). If some information about the dynamics of the system can be specified (e.g. the number of robot links and their joint angles) then the rest can be quickly inferred because the really hard part (the structure) is already present – the parameters of that structure just need to be learned.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Dec 2015 07:06:19 -0800</pubDate>
        <link>http://jhamrick.github.io/quals/physical%20reasoning%20with%20dynamics%20models/2015/12/28/Xie2015.html</link>
        <guid isPermaLink="true">http://jhamrick.github.io/quals/physical%20reasoning%20with%20dynamics%20models/2015/12/28/Xie2015.html</guid>
        
        
        <category>Physical reasoning with dynamics models</category>
        
      </item>
    
  </channel>
</rss>
